from PySide6.QtCore import Qt, Slot
from PySide6.QtWidgets import QWidget, QScrollArea, QLineEdit, QHBoxLayout, QVBoxLayout, QLabel, QCheckBox
from PySide6.QtGui import QColor, QPalette

from core.widget.basic_widget import DoubleSpinBox, ComboBox, SpinBox
from core.widget.font_box.font_family_combo_box import FontFamilyComboBox
from core.widget.font_box.font_size_combo_box import FontSizeComboBox
from core.widget.color_picker.color_picker import ColorPicker

from core.widget.text_style.text_style import TextStyle


class TextStyleForm(QScrollArea):
    def __init__(self, style_data: TextStyle, parent: QWidget | None = None) -> None:
        super().__init__(parent)

        self.style_data = style_data

        self.setWindowTitle("New style")
        self.setWidgetResizable(True)

        palette = self.palette()
        palette.setColor(QPalette.ColorRole.Window, palette.color(QPalette.ColorRole.Button))
        self.setPalette(palette)

        # name

        self.name_line_edit_label: QLabel = QLabel(self)
        self.name_line_edit_label.setText("Name")

        self.name_line_edit: QLineEdit = QLineEdit(self)
        self.name_line_edit.setText(self.style_data.name)

        self.name_line_edit_error_empty: QLabel = QLabel(self)
        self.name_line_edit_error_empty.setText("Style name is empty")
        self.name_line_edit_error_empty.setFixedHeight(10)
        font = self.name_line_edit_error_empty.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.name_line_edit_error_empty.setFont(font)
        self.name_line_edit_error_empty.hide()

        self.name_line_edit_error_exists: QLabel = QLabel(self)
        self.name_line_edit_error_exists.setText("Style already exists")
        self.name_line_edit_error_exists.setFixedHeight(10)
        font = self.name_line_edit_error_exists.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.name_line_edit_error_exists.setFont(font)
        self.name_line_edit_error_exists.hide()

        name_line_edit_layout: QHBoxLayout = QHBoxLayout()
        name_line_edit_layout.setContentsMargins(0, 0, 0, 0)
        name_line_edit_layout.setSpacing(10)
        name_line_edit_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        name_line_edit_layout.addWidget(self.name_line_edit_label)
        name_line_edit_layout.addWidget(self.name_line_edit)

        name_layout: QVBoxLayout = QVBoxLayout()
        name_layout.setContentsMargins(0, 0, 0, 0)
        name_layout.setSpacing(0)
        name_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        name_layout.addLayout(name_line_edit_layout)
        name_layout.addWidget(self.name_line_edit_error_empty)
        name_layout.addWidget(self.name_line_edit_error_exists)
        name_layout.addSpacing(5)

        # font

        self.font_title_label: QLabel = QLabel(self)
        self.font_title_label.setText("Font")

        self.font_check_box: QCheckBox = QCheckBox()
        self.font_check_box.setText("Change font")
        self.font_check_box.setChecked(self.style_data.is_font_changed)

        self.font_family_combo_box_label: QLabel = QLabel(self)
        self.font_family_combo_box_label.setText("Family")

        self.font_family_combo_box: FontFamilyComboBox = FontFamilyComboBox(self)
        self.font_family_combo_box.setFont(style_data.font_family)
        self.font_family_combo_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.font_family_combo_box.setEnabled)

        self.font_family_combo_box_error: QLabel = QLabel(self)
        self.font_family_combo_box_error.setText("Invalid input")
        self.font_family_combo_box_error.setFixedHeight(10)
        font = self.font_family_combo_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.font_family_combo_box_error.setFont(font)
        self.font_family_combo_box_error.hide()

        font_family_combo_box_layout = QHBoxLayout()
        font_family_combo_box_layout.setContentsMargins(0, 0, 0, 0)
        font_family_combo_box_layout.setSpacing(10)
        font_family_combo_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        font_family_combo_box_layout.addWidget(self.font_family_combo_box_label)
        font_family_combo_box_layout.addWidget(self.font_family_combo_box)

        self.font_size_combo_box_label: QLabel = QLabel(self)
        self.font_size_combo_box_label.setText("Size")

        self.font_size_combo_box: FontSizeComboBox = FontSizeComboBox(self)
        self.font_size_combo_box.setFontSize(style_data.font_size)
        self.font_size_combo_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.font_size_combo_box.setEnabled)

        self.font_size_combo_box_error: QLabel = QLabel(self)
        self.font_size_combo_box_error.setText("Invalid input")
        self.font_size_combo_box_error.setFixedHeight(10)
        font = self.font_size_combo_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.font_size_combo_box_error.setFont(font)
        self.font_size_combo_box_error.hide()

        font_size_combo_box_layout = QHBoxLayout()
        font_size_combo_box_layout.setContentsMargins(0, 0, 0, 0)
        font_size_combo_box_layout.setSpacing(10)
        font_size_combo_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        font_size_combo_box_layout.addWidget(self.font_size_combo_box_label)
        font_size_combo_box_layout.addWidget(self.font_size_combo_box)

        self.foreground_color_picker_label: QLabel = QLabel(self)
        self.foreground_color_picker_label.setText("Foreground color")

        self.foreground_color_red_spin_box: SpinBox = SpinBox(self)
        self.foreground_color_red_spin_box.setMinimum(0)
        self.foreground_color_red_spin_box.setMaximum(255)
        self.foreground_color_red_spin_box.setSuffix(" R")
        self.foreground_color_red_spin_box.setValue(self.style_data.foreground_color.red())
        self.foreground_color_red_spin_box.valueChanged.connect(self.onForegroundColorSpinBoxValueChanged)
        self.foreground_color_red_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.foreground_color_red_spin_box.setEnabled)

        self.foreground_color_green_spin_box: SpinBox = SpinBox(self)
        self.foreground_color_green_spin_box.setMinimum(0)
        self.foreground_color_green_spin_box.setMaximum(255)
        self.foreground_color_green_spin_box.setSuffix(" G")
        self.foreground_color_green_spin_box.setValue(self.style_data.foreground_color.green())
        self.foreground_color_green_spin_box.valueChanged.connect(self.onForegroundColorSpinBoxValueChanged)
        self.foreground_color_green_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.foreground_color_green_spin_box.setEnabled)

        self.foreground_color_blue_spin_box: SpinBox = SpinBox(self)
        self.foreground_color_blue_spin_box.setMinimum(0)
        self.foreground_color_blue_spin_box.setMaximum(255)
        self.foreground_color_blue_spin_box.setSuffix(" B")
        self.foreground_color_blue_spin_box.setValue(self.style_data.foreground_color.blue())
        self.foreground_color_blue_spin_box.valueChanged.connect(self.onForegroundColorSpinBoxValueChanged)
        self.foreground_color_blue_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.foreground_color_blue_spin_box.setEnabled)

        self.foreground_color_picker: ColorPicker = ColorPicker(self)
        self.foreground_color_picker.setColor(self.style_data.foreground_color)
        foreground_color_picker_palette = self.foreground_color_picker.ui.palette()
        foreground_color_picker_palette.setColor(QPalette.ColorRole.Button, palette.color(QPalette.ColorRole.Base))
        foreground_color_picker_palette.setColor(QPalette.ColorRole.Window, palette.color(QPalette.ColorRole.Base))
        self.foreground_color_picker.ui.setPalette(foreground_color_picker_palette)
        self.foreground_color_picker.colorChanged.connect(self.onForegroundColorChanged)
        self.foreground_color_picker.ui.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.foreground_color_picker.ui.setEnabled)

        self.foreground_color_picker_error: QLabel = QLabel(self)
        self.foreground_color_picker_error.setText("Invalid input")
        self.foreground_color_picker_error.setFixedHeight(10)
        font = self.foreground_color_picker_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.foreground_color_picker_error.setFont(font)
        self.foreground_color_picker_error.hide()

        foreground_color_picker_layout = QHBoxLayout()
        foreground_color_picker_layout.setContentsMargins(0, 0, 0, 0)
        foreground_color_picker_layout.setSpacing(10)
        foreground_color_picker_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        foreground_color_picker_layout.addWidget(self.foreground_color_picker_label)
        foreground_color_picker_layout.addWidget(self.foreground_color_red_spin_box)
        foreground_color_picker_layout.addWidget(self.foreground_color_green_spin_box)
        foreground_color_picker_layout.addWidget(self.foreground_color_blue_spin_box)
        foreground_color_picker_layout.addWidget(self.foreground_color_picker.ui)

        self.background_color_picker_label: QLabel = QLabel(self)
        self.background_color_picker_label.setText("Background color")

        self.background_color_red_spin_box: SpinBox = SpinBox(self)
        self.background_color_red_spin_box.setMinimum(0)
        self.background_color_red_spin_box.setMaximum(255)
        self.background_color_red_spin_box.setSuffix(" R")
        self.background_color_red_spin_box.setValue(self.style_data.background_color.red())
        self.background_color_red_spin_box.valueChanged.connect(self.onBackgroundColorSpinBoxValueChanged)
        self.background_color_red_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.background_color_red_spin_box.setEnabled)

        self.background_color_green_spin_box: SpinBox = SpinBox(self)
        self.background_color_green_spin_box.setMinimum(0)
        self.background_color_green_spin_box.setMaximum(255)
        self.background_color_green_spin_box.setSuffix(" G")
        self.background_color_green_spin_box.setValue(self.style_data.background_color.green())
        self.background_color_green_spin_box.valueChanged.connect(self.onBackgroundColorSpinBoxValueChanged)
        self.background_color_green_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.background_color_green_spin_box.setEnabled)

        self.background_color_blue_spin_box: SpinBox = SpinBox(self)
        self.background_color_blue_spin_box.setMinimum(0)
        self.background_color_blue_spin_box.setMaximum(255)
        self.background_color_blue_spin_box.setSuffix(" B")
        self.background_color_blue_spin_box.setValue(self.style_data.background_color.blue())
        self.background_color_blue_spin_box.valueChanged.connect(self.onBackgroundColorSpinBoxValueChanged)
        self.background_color_blue_spin_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.background_color_blue_spin_box.setEnabled)

        self.background_color_picker: ColorPicker = ColorPicker(self)
        self.background_color_picker.setColor(self.style_data.background_color)
        background_color_picker_palette = self.background_color_picker.ui.palette()
        background_color_picker_palette.setColor(QPalette.ColorRole.Button, palette.color(QPalette.ColorRole.Base))
        background_color_picker_palette.setColor(QPalette.ColorRole.Window, palette.color(QPalette.ColorRole.Base))
        self.background_color_picker.ui.setPalette(background_color_picker_palette)
        self.background_color_picker.colorChanged.connect(self.onBackgroundColorChanged)
        self.background_color_picker.ui.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.background_color_picker.ui.setEnabled)

        self.background_color_picker_error: QLabel = QLabel(self)
        self.background_color_picker_error.setText("Invalid input")
        self.background_color_picker_error.setFixedHeight(10)
        font = self.background_color_picker_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.background_color_picker_error.setFont(font)
        self.background_color_picker_error.hide()

        background_color_picker_layout = QHBoxLayout()
        background_color_picker_layout.setContentsMargins(0, 0, 0, 0)
        background_color_picker_layout.setSpacing(10)
        background_color_picker_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        background_color_picker_layout.addWidget(self.background_color_picker_label)
        background_color_picker_layout.addWidget(self.background_color_red_spin_box)
        background_color_picker_layout.addWidget(self.background_color_green_spin_box)
        background_color_picker_layout.addWidget(self.background_color_blue_spin_box)
        background_color_picker_layout.addWidget(self.background_color_picker.ui)

        self.bold_check_box: QCheckBox = QCheckBox()
        self.bold_check_box.setText("Bold")
        self.bold_check_box.setChecked(self.style_data.is_bold)
        self.bold_check_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.bold_check_box.setEnabled)

        self.italic_check_box: QCheckBox = QCheckBox()
        self.italic_check_box.setText("Italic")
        self.italic_check_box.setChecked(self.style_data.is_italic)
        self.italic_check_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.italic_check_box.setEnabled)

        self.underlined_check_box: QCheckBox = QCheckBox()
        self.underlined_check_box.setText("Underlined")
        self.underlined_check_box.setChecked(self.style_data.is_underlined)
        self.underlined_check_box.setEnabled(self.style_data.is_font_changed)
        self.font_check_box.stateChanged.connect(self.underlined_check_box.setEnabled)

        font_layout = QVBoxLayout()
        font_layout.setContentsMargins(0, 0, 0, 0)
        font_layout.setSpacing(0)
        font_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        font_layout.addWidget(self.font_title_label)
        font_layout.addSpacing(15)
        font_layout.addWidget(self.font_check_box)
        font_layout.addSpacing(5)
        font_layout.addLayout(font_family_combo_box_layout)
        font_layout.addWidget(self.font_family_combo_box_error)
        font_layout.addSpacing(5)
        font_layout.addLayout(font_size_combo_box_layout)
        font_layout.addWidget(self.font_size_combo_box_error)
        font_layout.addWidget(self.background_color_picker_error)
        font_layout.addSpacing(5)
        font_layout.addLayout(foreground_color_picker_layout)
        font_layout.addWidget(self.foreground_color_picker_error)
        font_layout.addSpacing(5)
        font_layout.addLayout(background_color_picker_layout)
        font_layout.addSpacing(5)
        font_layout.addWidget(self.bold_check_box)
        font_layout.addSpacing(5)
        font_layout.addWidget(self.italic_check_box)
        font_layout.addSpacing(5)
        font_layout.addWidget(self.underlined_check_box)
        font_layout.addSpacing(5)

        # paragraph

        self.paragraph_title_label: QLabel = QLabel(self)
        self.paragraph_title_label.setText("Paragraph")

        self.paragraph_check_box: QCheckBox = QCheckBox()
        self.paragraph_check_box.setText("Change paragraph")
        self.paragraph_check_box.setChecked(self.style_data.is_paragraph_changed)

        self.alignment_combo_box_label: QLabel = QLabel(self)
        self.alignment_combo_box_label.setText("Alignment")

        self.alignment_combo_box: ComboBox = ComboBox(self)
        self.alignment_combo_box.setEditable(True)
        self.alignment_combo_box.lineEdit().setEnabled(False)
        self.alignment_combo_box.lineEdit().setFocusPolicy(Qt.FocusPolicy.NoFocus)
        self.aligment_flags: list[Qt.AlignmentFlag] = [
            Qt.AlignmentFlag.AlignLeft,
            Qt.AlignmentFlag.AlignHCenter,
            Qt.AlignmentFlag.AlignRight,
        ]
        self.aligment_names: list[str] = ["Left", "Center", "Right"]
        self.alignment_combo_box.addItems(self.aligment_names)
        self.alignment_combo_box.setCurrentIndex(self.aligment_flags.index(style_data.alignment))
        self.alignment_combo_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.alignment_combo_box.setEnabled)

        alignment_combo_box_layout = QHBoxLayout()
        alignment_combo_box_layout.setContentsMargins(0, 0, 0, 0)
        alignment_combo_box_layout.setSpacing(10)
        alignment_combo_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        alignment_combo_box_layout.addWidget(self.alignment_combo_box_label)
        alignment_combo_box_layout.addWidget(self.alignment_combo_box)

        self.first_line_indent_spin_box_label: QLabel = QLabel(self)
        self.first_line_indent_spin_box_label.setText("First line indent")

        self.first_line_indent_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.first_line_indent_spin_box.setMinimum(0.0)
        self.first_line_indent_spin_box.setSingleStep(0.25)
        self.first_line_indent_spin_box.setDecimals(2)
        self.first_line_indent_spin_box.setSuffix(" cm")
        self.first_line_indent_spin_box.setValue(self.style_data.first_line_indent)
        self.first_line_indent_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.first_line_indent_spin_box.setEnabled)

        self.first_line_indent_spin_box_error: QLabel = QLabel(self)
        self.first_line_indent_spin_box_error.setText("Invalid input")
        self.first_line_indent_spin_box_error.setFixedHeight(10)
        font = self.first_line_indent_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.first_line_indent_spin_box_error.setFont(font)
        self.first_line_indent_spin_box_error.hide()

        first_line_indent_spin_box_layout = QHBoxLayout()
        first_line_indent_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        first_line_indent_spin_box_layout.setSpacing(10)
        first_line_indent_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        first_line_indent_spin_box_layout.addWidget(self.first_line_indent_spin_box_label)
        first_line_indent_spin_box_layout.addWidget(self.first_line_indent_spin_box)

        self.indent_spin_box_label: QLabel = QLabel(self)
        self.indent_spin_box_label.setText("Indent")

        self.indent_spin_box: SpinBox = SpinBox(self)
        self.indent_spin_box.setMinimum(0)
        self.indent_spin_box.setSingleStep(1)
        self.indent_spin_box.setValue(self.style_data.indent)
        self.indent_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.indent_spin_box.setEnabled)

        self.indent_spin_box_error: QLabel = QLabel(self)
        self.indent_spin_box_error.setText("Invalid input")
        self.indent_spin_box_error.setFixedHeight(10)
        font = self.indent_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.indent_spin_box_error.setFont(font)
        self.indent_spin_box_error.hide()

        indent_spin_box_layout = QHBoxLayout()
        indent_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        indent_spin_box_layout.setSpacing(10)
        indent_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        indent_spin_box_layout.addWidget(self.indent_spin_box_label)
        indent_spin_box_layout.addWidget(self.indent_spin_box)

        self.line_spacing_spin_box_label: QLabel = QLabel(self)
        self.line_spacing_spin_box_label.setText("Line spacing")

        self.line_spacing_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.line_spacing_spin_box.setMinimum(0.0)
        self.line_spacing_spin_box.setMaximum(5.0)
        self.line_spacing_spin_box.setSingleStep(0.05)
        self.line_spacing_spin_box.setDecimals(2)
        self.line_spacing_spin_box.setValue(self.style_data.line_spacing)
        self.line_spacing_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.line_spacing_spin_box.setEnabled)

        self.line_spacing_spin_box_error: QLabel = QLabel(self)
        self.line_spacing_spin_box_error.setText("Invalid input")
        self.line_spacing_spin_box_error.setFixedHeight(10)
        font = self.line_spacing_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.line_spacing_spin_box_error.setFont(font)
        self.line_spacing_spin_box_error.hide()

        line_spacing_spin_box_layout = QHBoxLayout()
        line_spacing_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        line_spacing_spin_box_layout.setSpacing(10)
        line_spacing_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        line_spacing_spin_box_layout.addWidget(self.line_spacing_spin_box_label)
        line_spacing_spin_box_layout.addWidget(self.line_spacing_spin_box)

        self.top_margin_spin_box_label: QLabel = QLabel(self)
        self.top_margin_spin_box_label.setText("Top margin")

        self.top_margin_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.top_margin_spin_box.setMinimum(0.0)
        self.top_margin_spin_box.setSingleStep(0.25)
        self.top_margin_spin_box.setDecimals(2)
        self.top_margin_spin_box.setSuffix(" cm")
        self.top_margin_spin_box.setValue(self.style_data.top_margin)
        self.top_margin_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.top_margin_spin_box.setEnabled)

        self.top_margin_spin_box_error: QLabel = QLabel(self)
        self.top_margin_spin_box_error.setText("Invalid input")
        self.top_margin_spin_box_error.setFixedHeight(10)
        font = self.top_margin_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.top_margin_spin_box_error.setFont(font)
        self.top_margin_spin_box_error.hide()

        top_margin_spin_box_layout = QHBoxLayout()
        top_margin_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        top_margin_spin_box_layout.setSpacing(10)
        top_margin_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        top_margin_spin_box_layout.addWidget(self.top_margin_spin_box_label)
        top_margin_spin_box_layout.addWidget(self.top_margin_spin_box)

        self.bottom_margin_spin_box_label: QLabel = QLabel(self)
        self.bottom_margin_spin_box_label.setText("Bottom margin")

        self.bottom_margin_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.bottom_margin_spin_box.setMinimum(0.0)
        self.bottom_margin_spin_box.setSingleStep(0.25)
        self.bottom_margin_spin_box.setDecimals(2)
        self.bottom_margin_spin_box.setSuffix(" cm")
        self.bottom_margin_spin_box.setValue(self.style_data.bottom_margin)
        self.bottom_margin_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.bottom_margin_spin_box.setEnabled)

        self.bottom_margin_spin_box_error: QLabel = QLabel(self)
        self.bottom_margin_spin_box_error.setText("Invalid input")
        self.bottom_margin_spin_box_error.setFixedHeight(10)
        font = self.bottom_margin_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.bottom_margin_spin_box_error.setFont(font)
        self.bottom_margin_spin_box_error.hide()

        bottom_margin_spin_box_layout = QHBoxLayout()
        bottom_margin_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        bottom_margin_spin_box_layout.setSpacing(10)
        bottom_margin_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        bottom_margin_spin_box_layout.addWidget(self.bottom_margin_spin_box_label)
        bottom_margin_spin_box_layout.addWidget(self.bottom_margin_spin_box)

        self.left_margin_spin_box_label: QLabel = QLabel(self)
        self.left_margin_spin_box_label.setText("Left margin")

        self.left_margin_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.left_margin_spin_box.setMinimum(0.0)
        self.left_margin_spin_box.setSingleStep(0.25)
        self.left_margin_spin_box.setDecimals(2)
        self.left_margin_spin_box.setSuffix(" cm")
        self.left_margin_spin_box.setValue(self.style_data.left_margin)
        self.left_margin_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.left_margin_spin_box.setEnabled)

        self.left_margin_spin_box_error: QLabel = QLabel(self)
        self.left_margin_spin_box_error.setText("Invalid input")
        self.left_margin_spin_box_error.setFixedHeight(10)
        font = self.left_margin_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.left_margin_spin_box_error.setFont(font)
        self.left_margin_spin_box_error.hide()

        left_margin_spin_box_layout = QHBoxLayout()
        left_margin_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        left_margin_spin_box_layout.setSpacing(10)
        left_margin_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        left_margin_spin_box_layout.addWidget(self.left_margin_spin_box_label)
        left_margin_spin_box_layout.addWidget(self.left_margin_spin_box)

        self.right_margin_spin_box_label: QLabel = QLabel(self)
        self.right_margin_spin_box_label.setText("Right margin")

        self.right_margin_spin_box: DoubleSpinBox = DoubleSpinBox(self)
        self.right_margin_spin_box.setMinimum(0.0)
        self.right_margin_spin_box.setSingleStep(0.25)
        self.right_margin_spin_box.setDecimals(2)
        self.right_margin_spin_box.setSuffix(" cm")
        self.right_margin_spin_box.setValue(self.style_data.right_margin)
        self.right_margin_spin_box.setEnabled(self.style_data.is_paragraph_changed)
        self.paragraph_check_box.stateChanged.connect(self.right_margin_spin_box.setEnabled)

        self.right_margin_spin_box_error: QLabel = QLabel(self)
        self.right_margin_spin_box_error.setText("Invalid input")
        self.right_margin_spin_box_error.setFixedHeight(10)
        font = self.right_margin_spin_box_error.font()
        font.setItalic(True)
        font.setPixelSize(10)
        self.right_margin_spin_box_error.setFont(font)
        self.right_margin_spin_box_error.hide()

        right_margin_spin_box_layout = QHBoxLayout()
        right_margin_spin_box_layout.setContentsMargins(0, 0, 0, 0)
        right_margin_spin_box_layout.setSpacing(10)
        right_margin_spin_box_layout.setAlignment(Qt.AlignmentFlag.AlignLeft)
        right_margin_spin_box_layout.addWidget(self.right_margin_spin_box_label)
        right_margin_spin_box_layout.addWidget(self.right_margin_spin_box)

        paragraph_layout = QVBoxLayout()
        paragraph_layout.setContentsMargins(0, 0, 0, 0)
        paragraph_layout.setSpacing(0)
        paragraph_layout.setAlignment(Qt.AlignmentFlag.AlignTop)
        paragraph_layout.addWidget(self.paragraph_title_label)
        paragraph_layout.addSpacing(15)
        paragraph_layout.addWidget(self.paragraph_check_box)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(alignment_combo_box_layout)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(first_line_indent_spin_box_layout)
        paragraph_layout.addWidget(self.first_line_indent_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(indent_spin_box_layout)
        paragraph_layout.addWidget(self.indent_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(line_spacing_spin_box_layout)
        paragraph_layout.addWidget(self.line_spacing_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(top_margin_spin_box_layout)
        paragraph_layout.addWidget(self.top_margin_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(bottom_margin_spin_box_layout)
        paragraph_layout.addWidget(self.bottom_margin_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(left_margin_spin_box_layout)
        paragraph_layout.addWidget(self.left_margin_spin_box_error)
        paragraph_layout.addSpacing(5)
        paragraph_layout.addLayout(right_margin_spin_box_layout)
        paragraph_layout.addWidget(self.right_margin_spin_box_error)
        paragraph_layout.addSpacing(5)

        mid_layout: QHBoxLayout = QHBoxLayout()
        mid_layout.setContentsMargins(0, 0, 0, 0)
        mid_layout.setSpacing(20)
        mid_layout.addLayout(font_layout, 1)
        mid_layout.addLayout(paragraph_layout, 1)

        main_layout: QVBoxLayout = QVBoxLayout()
        main_layout.setContentsMargins(10, 10, 10, 10)
        main_layout.setSpacing(20)
        main_layout.addLayout(name_layout)
        main_layout.addLayout(mid_layout)

        self.scroll_widget = QWidget()
        self.scroll_widget.setLayout(main_layout)
        self.setWidget(self.scroll_widget)

    @Slot(QColor)
    def onBackgroundColorChanged(self, color: QColor) -> None:
        self.background_color_red_spin_box.setValue(color.red())
        self.background_color_green_spin_box.setValue(color.green())
        self.background_color_blue_spin_box.setValue(color.blue())

    @Slot(int)
    def onBackgroundColorSpinBoxValueChanged(self, _: int) -> None:
        red = self.background_color_red_spin_box.value()
        green = self.background_color_green_spin_box.value()
        blue = self.background_color_blue_spin_box.value()

        self.background_color_picker.setColor(QColor(red, green, blue))

    @Slot(QColor)
    def onForegroundColorChanged(self, color: QColor) -> None:
        self.foreground_color_red_spin_box.setValue(color.red())
        self.foreground_color_green_spin_box.setValue(color.green())
        self.foreground_color_blue_spin_box.setValue(color.blue())

    @Slot(int)
    def onForegroundColorSpinBoxValueChanged(self, _: int) -> None:
        red = self.foreground_color_red_spin_box.value()
        green = self.foreground_color_green_spin_box.value()
        blue = self.foreground_color_blue_spin_box.value()

        self.foreground_color_picker.setColor(QColor(red, green, blue))
